# 定义整个服务的全局属性
[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    Flush 1
    Grace 5

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    Daemon off

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    Log_Level info

    # Parsers_File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf

    # Streams_File
    # ============
    # specify an optional 'Streams' configuration file
    #Streams_File streams.conf

    ############## 调度和重试 #############
    # https://docs.fluentbit.io/manual/administration/scheduling-and-retries
    # 当推送数据到OUTPUT时失败时, 输出插件可能会会返回OK/Retry/Error三种状态。 当OK/Error时,将不再处理数据。
    # 当为Retry时, 则可以尝试重新发送数据。

    # 重试指数退避的基数。非线性重试，而是基于重试次数和基数、随机数算出下一次重试时间
    # ======
    # scheduler.base 3

    # 最大重试时间
    # ======
    # scheduler.cap 30


    ############## 存储相关 ###########
    # 在文件系统设置可选位置来存储数据流和数据块
    # 不设置INPUT插件只能使用内存缓冲
    # storage.path <path>
  
    # 数据从内存到文件系统的同步模式。支持full/normal. 
    # full可以保证内存的可靠性，即使fluent Bit崩溃，也能保证数据同步到文件系统
    # storage.sync normal

    # 是否对文件系统写入数据和读取数据时启用数据完整性检查。存储层采用CRC32算法。
    # storage.checksum Off

    # 
    # storage.max_chunks_up

    # storage.backlog.mem_limit

    ##################### HTTP SERVER ################
    # https://docs.fluentbit.io/manual/administration/monitoring
    # 启动一个http服务器
    # 接口:
    #   /                   fluentbit信息
    #   /api/v1/uptime      服务正常运行信息
    #   /api/v1/metrics     每个加载插件的内部指标
    #   /api/v1/metrics/prometheus  prometheus标准的内部指标
    #   /api/v1/storage     存储层/缓存数据的内部指标。只有SERVICE开启了storage.metrics才生效
    #   /api/v2/reload      热重载配置. `curl -X POST -d '{}' localhost:2020/api/v2/reload`
    #   /api/v2/metrics/prometehus  
    #   /api/v2/metrics  
    
    # HTTP_Server  On
    # HTTP_Listen  0.0.0.0
    # HTTP_PORT    2020

    # 是否启用接口进行热重启
    # Hot_Reload   on


# 拆散配置文件，避免太过复杂
#  input files
@INCLUDE inputs.conf
@INCLUDE input_*.conf

# output files
@INCLUDE outputs.conf

# 定义一个输入源(与输入插件有关), 每个输入插件都有自己的配置
[INPUT]
  Name   dummy
  Tag    dummy.log
  Dummy {"message": "mylog", "trace_id": "0000000000000000f4dbb3edd765f620", "span_id": "43222c2d51a7abe3"}
  # 日志级别，支持off、error、warn、info、debug和trace。默认为SERVICE的Log_Level
  #Log_Level info 


# 定义过滤器插件。每个过滤器插件都有自己的配置
# [FILTER]
#   Name  name_of_filter
#   Match *
#   Match_Regex *
#   Log_Level info


[OUTPUT]
  Name          forward
  Match         *
  Host          127.0.0.1
  Port          24224

[OUTPUT]
  Name            es
  Match           varlog.*
  Host            127.0.0.1
  Port            9200
  Logstash_Format On