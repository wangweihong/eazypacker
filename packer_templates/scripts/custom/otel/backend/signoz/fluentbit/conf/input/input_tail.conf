# https://docs.fluentbit.io/manual/pipeline/inputs/tail
# 监控一个或多个文件, 类似于tail -f命令的行为
[INPUT]
    Name            tail

    # Tag
    # ============
    # Tag,标签用于标记日志，进行路由。
    # OUTPUT/FILTER插件通过Match与Tag的匹配来决定是否执行
    # 如果Tag为通配符符, 如`varlog.*`, 则*将会被实际读取的日志文件名替换
    # 尤其是Path=/var/log/*.log使用通配符指定多个文件时
    # 如读取的文件为/var/log/syslog.log, Tag则为varlog.syslog.log 
    #
    Tag             syslog_local

    # Path
    # ============
    # 指定一个或多个日志文件的路径。允许使用通配符
    # 还允许使用`,`分隔的多个模式。
    # 如/var/log/containers/*.log
    #  
    Path            /var/log/syslog
    

    # Path_Key
    # ============
    # 将监听的文件的名称作为记录的一部分。
    # 设置的值作为记录的键。
    #  
    #Path_Key        file_name

    # Exclude_Path
    # ============
    # 排除特定的文件
    #  
    #Exclude_Path            *.gz,*.zip

    # Offset_Key
    # ============
    # 将偏移量也作为记录的一部分。
    # 设置的值作为记录的键。
    #  
    #Offset_Key        file_offset

    # Read_from_Head
    # ============
    # 启动时新发现的文件(没有数据库偏移量/位置), 则从文件头部读取内容而不是尾部
    #  
    #Read_from_Head        False

    # Refresh_Interval
    # ============
    # 刷新监视文件列表的时间间隔(以秒为单位)
    #  
    #Refresh_Interval        60

    # DB
    # ============
    # 存储监听文件和偏移量的数据库路径
    # 如果不指定,默认插件将从头开始读取每个目标文件。
    #  
    DB              /var/log/flb_syslog.db

    # Mem_Buf_Limit
    # ============
    # Tail插件添加数据到引擎时所使用的内存限制
    # 一旦达到限制, 将会被暂停。但数据被刷新后才恢复
    #  
    Mem_Buf_Limit   5MB

    # Skip_Long_Lines
    # ============
    # 当监听的文件由于行很长达到了缓冲区容量(Buffer_Max_Size), 默认行为是停止监听该文件。
    # 通过这项配置来指定是否跳过长行并继续处理适合缓冲区大小的其他行
    #  
    Skip_Long_Lines Off

    # Parser 
    # ============
    # 指定解析器来将日志信息解释成结构化消息
    #
    #  
    #Parser  docker

    # Key  
    # ============
    # 当日志信息是非结构化的(未采用解析器)时, 日志信息会被存放在log键
    # 这里可以修改存放的键名
    #  
    #Key   log

    # Tag_Regex  
    # ============
    # 设置正则表达式以从文件名中提取字段
    #  
    #Tag_Regex   (?<pod_name>[a-z0-9](?:[-a-z0-9]*[a-z0-9])?(?:\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace_name>[^_]+)_(?<container_name>.+)-(?<container_id>[a-z0-9]{64})\.log$


    # 新多行解析器 
    # ============
    # fluent-bit 1.8版本引入了新的多行核心。
    # 同时保留旧的配置机制, 两者不能同时使用 
    #
    # multiline.parser
    # ----------------
    # 指定采用的一个或多个多行解析器 
    #
    # multiline.parser  docker, cri

    # 旧多行解析器 
    # ============
    # fluent-bit 1.8版本引入了新的多行核心。
    # 同时保留旧的配置机制, 两者不能同时使用 
    #
    # Multiline 
    # ----------------
    # 是否启用多行解析器。启用后会不再使用`Parser`
    #
    # Multiline  Off

    # Parser_Firstline 
    # ----------------
    # 第一个多行解析器名称
    #
    # Parser_Firstline  docker